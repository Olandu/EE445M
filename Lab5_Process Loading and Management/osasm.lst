


ARM Macro Assembler    Page 1 


    1 00000000         ;/******************************************************
                       ***********************/
    2 00000000         ; OSasm.s: low-level OS commands, written in assembly   
                                           */
    3 00000000         ; Runs on LM4F120/TM4C123
    4 00000000         ; A very simple real time operating system with minimal 
                       features.
    5 00000000         ; Daniel Valvano
    6 00000000         ; January 29, 2015
    7 00000000         ;
    8 00000000         ; This example accompanies the book
    9 00000000         ;  "Embedded Systems: Real Time Interfacing to ARM Corte
                       x M Microcontrollers",
   10 00000000         ;  ISBN: 978-1463590154, Jonathan Valvano, copyright (c)
                        2015
   11 00000000         ;
   12 00000000         ;  Programs 4.4 through 4.12, section 4.2
   13 00000000         ;
   14 00000000         ;Copyright 2015 by Jonathan W. Valvano, valvano@mail.ute
                       xas.edu
   15 00000000         ;    You may use, edit, run or distribute this file
   16 00000000         ;    as long as the above copyright notice remains
   17 00000000         ; THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHE
                       THER EXPRESS, IMPLIED
   18 00000000         ; OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED W
                       ARRANTIES OF
   19 00000000         ; MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE A
                       PPLY TO THIS SOFTWARE.
   20 00000000         ; VALVANO SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR
                        SPECIAL, INCIDENTAL,
   21 00000000         ; OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
   22 00000000         ; For more information about my classes, my research, an
                       d my books, see
   23 00000000         ; http://users.ece.utexas.edu/~valvano/
   24 00000000         ; */
   25 00000000         
   26 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   27 00000000                 THUMB
   28 00000000                 REQUIRE8
   29 00000000                 PRESERVE8
   30 00000000         
   31 00000000                 EXTERN           RunPt       ; currently running
                                                             thread
   32 00000000                 EXTERN           NextRunPt   ; point to next thr
                                                            ead to run
   33 00000000                 EXPORT           OS_DisableInterrupts
   34 00000000                 EXPORT           OS_EnableInterrupts
   35 00000000                 EXPORT           StartOS
   36 00000000                 EXPORT           PendSV_Handler
   37 00000000         
   38 00000000         
   39 00000000         
   40 00000000         OS_DisableInterrupts
   41 00000000 B672            CPSID            I
   42 00000002 4770            BX               LR
   43 00000004         
   44 00000004         
   45 00000004         OS_EnableInterrupts



ARM Macro Assembler    Page 2 


   46 00000004 B662            CPSIE            I
   47 00000006 4770            BX               LR
   48 00000008         
   49 00000008         
   50 00000008         PendSV_Handler
   51 00000008 B672            CPSID            I           ; Prevent interrupt
                                                            ion during context 
                                                            switch
   52 0000000A E92D 0FF0       PUSH             {R4-R11}    ; Save remaining re
                                                            gs r4-11 
   53 0000000E 480E            LDR              R0, =RunPt  ; R0=pointer to Run
                                                            Pt, old thread
   54 00000010 6801            LDR              R1, [R0]    ; RunPt->stackPoint
                                                            er = SP;
   55 00000012 F8C1 D000       STR              SP, [R1]    ; save SP of proces
                                                            s being switched ou
                                                            t
   56 00000016         
   57 00000016 490D            LDR              R1, =NextRunPt
   58 00000018 6809            LDR              R1,[R1]     ; R1 = NextRunPt
   59 0000001A         ;LDR     R1, [R1,#4]        ; 6) R1 = RunPt->next
   60 0000001A 6001            STR              R1, [R0]    ;    RunPt = R1
   61 0000001C         
   62 0000001C F8D1 D000       LDR              SP, [R1]    ; 7) new thread SP;
                                                             SP = RunPt->sp;
   63 00000020 E8BD 0FF0       POP              {R4-R11}    ; restore regs r4-1
                                                            1 
   64 00000024 B662            CPSIE            I           ; tasks run with I=
                                                            0
   65 00000026 4770            BX               LR          ; Exception return 
                                                            will restore remain
                                                            ing context 
   66 00000028         
   67 00000028         StartOS
   68 00000028 4807            LDR              R0, =RunPt  ; currently running
                                                             thread
   69 0000002A 6802            LDR              R2, [R0]    ; R2 = value of Run
                                                            Pt
   70 0000002C F8D2 D000       LDR              SP, [R2]    ; new thread SP; SP
                                                             = RunPt->stackPoin
                                                            ter;
   71 00000030 E8BD 0FF0       POP              {R4-R11}    ; restore regs r4-1
                                                            1
   72 00000034 BC0F            POP              {R0-R3}     ; restore regs r0-3
                                                            
   73 00000036 F85D CB04       POP              {R12}
   74 0000003A B001            ADD              SP,SP, #4
   75 0000003C F85D EB04       POP              {LR}        ; discard LR from i
                                                            nitial stack
   76 00000040 B001            ADD              SP, SP, #4  ; discard PSR
   77 00000042 B662            CPSIE            I           ; Enable interrupts
                                                             at processor level
                                                            
   78 00000044 4770            BX               LR          ; start first threa
                                                            d
   79 00000046         
   80 00000046         
   81 00000046 00 00           ALIGN
   82 00000048                 END



ARM Macro Assembler    Page 3 


              00000000 
              00000000 
Command Line: --debug --xref --cpu=Cortex-M4 --apcs=interwork --depend=.\osasm.
d -o.\osasm.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\
Inc\Luminary --list=.\osasm.lst OSasm.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 26 in file OSasm.s
   Uses
      None
Comment: .text unused
OS_DisableInterrupts 00000000

Symbol: OS_DisableInterrupts
   Definitions
      At line 40 in file OSasm.s
   Uses
      At line 33 in file OSasm.s
Comment: OS_DisableInterrupts used once
OS_EnableInterrupts 00000004

Symbol: OS_EnableInterrupts
   Definitions
      At line 45 in file OSasm.s
   Uses
      At line 34 in file OSasm.s
Comment: OS_EnableInterrupts used once
PendSV_Handler 00000008

Symbol: PendSV_Handler
   Definitions
      At line 50 in file OSasm.s
   Uses
      At line 36 in file OSasm.s
Comment: PendSV_Handler used once
StartOS 00000028

Symbol: StartOS
   Definitions
      At line 67 in file OSasm.s
   Uses
      At line 35 in file OSasm.s
Comment: StartOS used once
5 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

NextRunPt 00000000

Symbol: NextRunPt
   Definitions
      At line 32 in file OSasm.s
   Uses
      At line 57 in file OSasm.s
Comment: NextRunPt used once
RunPt 00000000

Symbol: RunPt
   Definitions
      At line 31 in file OSasm.s
   Uses
      At line 53 in file OSasm.s
      At line 68 in file OSasm.s

2 symbols
339 symbols in table
